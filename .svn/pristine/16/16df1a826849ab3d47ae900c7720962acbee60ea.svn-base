#ifndef SPOOFER_SNIFFER_H
#define SPOOFER_SNIFFER_H

#include <sys/types.h>
#include <pcap.h>
#include <pcap/pcap.h>
#include <libnet.h>

#define SPOOFER_VLAN_LEN (4)

#define SPOOFER_IP_OFFSET   (LIBNET_ETH_H)  /* 14 */
#define SPOOFER_TCP_OFFSET  (LIBNET_ETH_H + LIBNET_IPV4_H)  /* 34 */
#define SPOOFER_UDP_OFFSET  (LIBNET_ETH_H + LIBNET_IPV4_H)  /* 34 */
#define SPOOFER_DNS_OFFSET  (LIBNET_ETH_H + LIBNET_IPV4_H + LIBNET_UDP_H)   /* 42 */

#define SPOOFER_VLAN_OFFSET (LIBNET_ETH_H)  /* 14 */

#define SPOOFER_IP_OFFSET_VLAN   (LIBNET_ETH_H + SPOOFER_VLAN_LEN)  /* 18 */
#define SPOOFER_TCP_OFFSET_VLAN  (LIBNET_ETH_H + SPOOFER_VLAN_LEN + LIBNET_IPV4_H)  /* 38 */
#define SPOOFER_UDP_OFFSET_VLAN  (LIBNET_ETH_H + SPOOFER_VLAN_LEN + LIBNET_IPV4_H)  /* 38 */
#define SPOOFER_DNS_OFFSET_VLAN  (LIBNET_ETH_H + SPOOFER_VLAN_LEN + LIBNET_IPV4_H + LIBNET_UDP_H)   /* 46 */


#define SPOOFER_VLAN_PROT_MASK  0xe000  /* prot is 3 bit */
#define SPOOFER_VLAN_CFI_MASK   0x1000  /* vlan cfi is 1 bit */
#define SPOOFER_VLAN_ID_MASK    0x0fff  /* vlan id is 12 bit */

#define SPOOFER_HTTP_PACKET_MSG_TYPE (1)                     /* the msg type of packet */

#define SPOOFER_MAX_PACKET_SIZE (8192 - 8)//(2048 - (sizeof(long)))

#define SPOOFER_PROTOCOL_OFFSET (SPOOFER_IP_OFFSET + 10)
#define SPOOFER_PROTOCOL_OFFSET_VLAN (SPOOFER_IP_OFFSET_VLAN + 10)

/**
 *  The following struct is for the tcp/ip net level.
 *
 **/

typedef struct spo_sniff_ether_s {
    u_char ether_dhost[ETHER_ADDR_LEN];                 /* dst mac address */
    u_char ether_shost[ETHER_ADDR_LEN];                 /* src mac address */
    u_short ether_type;                                 /* ether type */
}spo_sniff_ether_t, *spo_sniff_ether_p;


typedef struct spo_sniff_ip_s {
    u_char ip_vhl;
    #define IP_V(ip) (((ip)->ip_vhl & 0xf0) >> 4)       /* ip version */
    #define IP_HL(ip) ((ip)->ip_vhl & 0x0f)             /* ip header length */

    u_char ip_tos;
    u_short ip_len;                                     /* ip total len */
    u_short ip_id;                                      /* ip's id */
    u_short ip_off;                                     /* ip fragment offset */


    #define IP_RF 0x8000
    #define IP_DF 0x4000
    #define IP_MF 0x2000
    #define IP_OFFMASK 0x1fff

    u_char ip_ttl;                                      /* ip's ttl */
    u_char ip_p;                                        /*ip protocol*/
    u_short ip_sum;                                     /*ip check sum*/

    struct in_addr ip_src;                              /* ip src address */
    struct in_addr ip_dst;                              /* ip dst address */
}spo_sniff_ip_t, *spo_sniff_ip_p;


typedef u_int tcp_seq_t;

typedef struct spo_sniff_tcp_s {
    u_short tcp_sport;                                  /* tcp src port */
    u_short tcp_dport;                                  /* tcp dst port */
    tcp_seq_t tcp_seq;                                  /* tcp current seq */
    tcp_seq_t tcp_ack;                                  /* tcp ack */

    u_char tcp_offx2;                                   /* tcp header len, just 6 bit */
    u_char tcp_flags;                                   /* tcp flag */

    u_short tcp_win;                                    /* tcp win size */
    u_short tcp_sum;                                    /* tcp sum check */
    u_short tcp_urp;                                    /* Urgent Pointer */
}spo_sniff_tcp_t, *spo_sniff_tcp_p;


typedef struct spo_sniff_udp_s {
    u_short udp_sport;                                  /* udp src port */
    u_short udp_dport;                                  /* udp dst port */
    u_short udp_len;                                    /* udp total length */
    u_short udp_sum;                                    /* udp check sum */
}spo_sniff_udp_t, *spo_sniff_udp_p;


typedef struct spo_sniff_dns_s {
    u_short dns_id;                                     /* dns id */
    u_short dns_flag;                                   /* dns flg */
    u_short dns_ques;                                   /* question amount */
    u_short dns_ans;                                    /* answer amount */
    u_short dns_auth;                                   /*  */
    u_short dns_add;
}spo_sniff_dns_t, *spo_sniff_dns_p;



/**
 *  when we catch a packet and after copied it, we insert it to msg queue.
 *
 *  the member packet_ety saves the packet we catch.
 *
 **/

typedef struct spo_http_packet_msg_s {
    long msg_type;
    char packet[SPOOFER_MAX_PACKET_SIZE];
}spo_http_packet_msg_t;


#define SPOOFER_HTTP_PACKET_MSG_SIZE (sizeof(spo_http_packet_msg_t))          /* the size of struct spo_packet_msg_t, is the msg's size */


void spo_sniffer_fp_ring(void *info_blk);
void spo_sniffer_pcap(void *info_blk);

#endif // SPOOFER_SNIFFER_H
