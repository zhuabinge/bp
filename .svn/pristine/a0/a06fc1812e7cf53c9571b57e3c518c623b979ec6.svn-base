#include <sys/msg.h>
#include <signal.h>

#include "../spoofer_main/spoofer_main.h"
#include "spoofer_ipcs.h"


SPO_RET_STATUS_INT spo_msgget(key_t key, int msgflg) {

    int ret = -1;

    ret = msgget(key, msgflg);

    return ret;
}

SPO_RET_VALUE_INT spo_msgrcv(int msgid, void *msg_buf, size_t msg_size, long msg_type, int msgflg) {

    ssize_t size = 0;

    size = msgrcv(msgid, msg_buf, msg_size, msg_type, msgflg);

    return size;
}


SPO_RET_VALUE_INT spo_msgsnd(int msgid, void *msg_buf, size_t msg_size, int msgflg) {

    int size = -1;

    if (msg_buf == NULL || msg_size <= 0) {
        return SPOOFER_FAILURE;
    }

    size = msgsnd(msgid, msg_buf, msg_size, msgflg);

    return size;
}


__sighandler_t spo_signal(int sig, __sighandler_t handler) {
    return signal(sig,handler);
}


SPO_RET_VALUE_INT spo_sigaction(int sig, const struct sigaction *act, struct sigaction *oact) {

    if (act == NULL) {
        return SPOOFER_FAILURE;
    }

    return sigaction(sig, act, oact);
}



/**
 *
 *  signal a sig use sigaction
 *
 *  @param sig, is the sig to add.
 *
 *  @param func, is the func when sig come, we call it.
 *
 *  @return int, is the exec status.
 *
 **/

SPO_RET_STATUS_INT spo_signal_a_sig(int sig, spo_sa_sigaction func) {

    struct sigaction act, oact;

    act.sa_flags = 0;
    sigemptyset(&act.sa_mask);
    act.sa_sigaction = func;

    sigaction(sig, &act, &oact);

    return SPOOFER_OK;
}



/**
 *
 *  del a sig in a sigset.
 *
 *  @param sig, is the sig we have to del.
 *
 *  @param set, the set we have to op.
 *
 *  @return int, is the exec status.
 *
 **/


SPO_RET_STATUS_INT spo_del_sig_in_set(int sig, sigset_t *set) {

    if (sig <= 0 || sig > 64 || set == NULL) {
        return SPOOFER_FAILURE;
    }

    if (sigismember(set, sig) == 1) {
        if (sigdelset(set, sig) == -1) {
            perror("del sig err\n");
            return SPOOFER_FAILURE;
        }
    }else {
        perror("sig no a member in this set\n");
        return SPOOFER_FAILURE;
    }

    return SPOOFER_OK;
}


/**
 *
 *  fill a sigset.
 *
 *  @param set, is the sigset, we have to fill.
 *
 *  @return int, is the exec status.
 *
 **/

SPO_RET_STATUS_INT spo_fill_sigmask(sigset_t *set) {

    if (set == NULL) {
        return SPOOFER_FAILURE;
    }

    if (sigfillset(set) == -1) {
        perror("fill set err\n");
        return SPOOFER_FAILURE;
    }

    return SPOOFER_OK;
}


/**
 *
 *  mask all sig and signal it.
 *
 *  @return int, is the exec status.
 *
 **/

SPO_RET_STATUS_INT spo_mask_all_sig() {

    int ret = 0;
    sigset_t set, oset;

    memset(&set, '\0', sizeof(sigset_t));
    memset(&oset, '\0', sizeof(sigset_t));

    ret = spo_fill_sigmask(&set);
    if (ret == SPOOFER_FAILURE) {
        printf("fill sig set err\n");
        return SPOOFER_FAILURE;
    }

    ret = sigprocmask(SIG_BLOCK, &set, &oset);
    if (ret == -1) {
        perror("mask all sig err\n");
        return SPOOFER_FAILURE;
    }

    return SPOOFER_OK;
}


/**
 *
 *  signal a sigset.
 *
 *  @param set, is the sigset we have to signal.
 *
 *  @return int, is the exec status.
 *
 **/

SPO_RET_STATUS_INT spo_signal_a_sigset(sigset_t *set) {

    int ret = 0;
    sigset_t oset;

    if (set == NULL) {
        return SPOOFER_FAILURE;
    }

    ret = sigprocmask(SIG_BLOCK, set, &oset);

    if (ret == -1) {
        perror("signal sigset err\n");
        return SPOOFER_FAILURE;
    }

    return SPOOFER_OK;
}

